stages:
  - build
  - docker
  - deploy
  - release

variables:
    REGISTRY_PATH: ${CI_REGISTRY}/gaia-x/data-infrastructure-federation-services/por
    IMAGE_NAME: ${CI_PROJECT_NAME}/portal-${CI_PROJECT_NAME}
    TAG: ${CI_PIPELINE_ID}

application-build:
  stage: build
  image:
    name: registry.gitlab.com/gaia-x/data-infrastructure-federation-services/por/demo/eclipse-temurin:11-jdk-alpine
  artifacts:
    paths:
      - deploy/docker/output
  only:
    - main
    - /^release\/\d*[.]\d*[.]\d*$/
    - tags
  script:
    - mkdir -p deploy/docker/output
    - rm -rf deploy/docker/output/*
    - ./mvnw clean install -DskipTests
    - cp ./target/*.jar deploy/docker/output/${CI_PROJECT_NAME}.jar


docker-build:
  stage: docker
  dependencies:
    - application-build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  only:
    - main
    - /^release\/\d*[.]\d*[.]\d*$/
    - tags
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}/deploy/docker"
      --dockerfile "${CI_PROJECT_DIR}/deploy/docker/Dockerfile"
      --destination "${REGISTRY_PATH}/${IMAGE_NAME}:${TAG}"


.base_deploy: &base_deploy
  stage: deploy
  only:
    - main
    - /^release\/\d*[.]\d*[.]\d*$/
    - tags
  image: registry.gitlab.com/gaia-x/data-infrastructure-federation-services/por/demo/alpine/k8s:1.21.12
  script:
    - mkdir -p /root/.kube
    - echo "${K8S_CONFIG}"  | base64 -d > /root/.kube/config
    - mkdir -p deploy/helm/app/config-repo
    - cp src/main/resources/application.yml deploy/helm/app/config-repo/application.yml
    - helm upgrade --install gaia-x-${CI_PROJECT_NAME} deploy/helm/app --values deploy/helm/app/values.yaml -n gaia-x-portal --set image.repository="${REGISTRY_PATH}" --set image.name="${IMAGE_NAME}" --set image.tag=${TAG} --set fullnameOverride=${CI_PROJECT_NAME} --wait


#Deploy to Test:
#  <<: *base_deploy
#  environment:
#    name: az-test
#  variables:
#    K8S_CONFIG: "${AZ_KUBE_CONFIG}"


Deploy to Demo:
  <<: *base_deploy
  environment:
    name: ecodemo
#  when: manual
  variables:
    K8S_CONFIG: "${ECO_K8S}"


release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG                 # Run this job when a tag is created
  script:
    - echo "running release_job"
  release:                               # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'


helm_package:
  stage: release
  image: dtzar/helm-kubectl:3.10.1
  rules:
    - if: $CI_TASK == "helm_package" && $CHANNEL
  script:
    - echo "$CHANNEL"
    - mkdir -p package deploy/helm/${CHANNEL}
    - export CHART_VERSION=$(grep -m 1 "version:" deploy/helm/${CHANNEL}/Chart.yaml | awk '{print $2}')
    - helm package deploy/helm/${CHANNEL} -d deploy/helm/package/${CHANNEL} --version $CHART_VERSION  # Package the chart with the version from the Chart.yaml file
    - export FILE_NAME=$(ls deploy/helm/package/${CHANNEL}/*.tgz)
    - 'curl --request POST --user gitlab-ci-token:$CI_JOB_TOKEN --form "chart=@${FILE_NAME}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/${CHANNEL}/charts"' # Upload the packaged chart to the GitLab Helm repository
